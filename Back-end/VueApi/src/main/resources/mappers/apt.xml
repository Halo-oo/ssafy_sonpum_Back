<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.vue.model.mapper.HouseMapMapper">

	<resultMap type="houseProductDto" id="viewProduct">
		<collection property="houseImages" column="houseProductId" javaType="list" ofType="houseImageDto" select="houseImageList" />
	</resultMap>

	<!-- 주소 가져오기 -->
	<select id="getAddress" resultType="AddressDto" parameterType="string">
		SELECT addressId, dongCode, roadName, roadNameBonbun, roadNameBubun, apartName, buildYear, lat, lng
		FROM sonpum.address
		WHERE dongCode = #{dongCode};
	</select>

	<!-- #(시세)아파트 거래내역 -->
	<!-- 시도정보 전체 호출 -->
	<select id="getSido" resultType="sidoGugunCodeDto">
		select left(sidoCode,2) sidoCode, sidoName
		from sidocode
		order by sidoCode
	</select>
	
	<!-- 선택한 시도에 포함된 구군 정보 호출 -->
	<select id="getGugunInSido" parameterType="string" resultType="sidoGugunCodeDto">
		select left(gugunCode,5) gugunCode, gugunName
		from guguncode
		where left(gugunCode,2) = #{sido}
		order by gugunCode
	</select>
	
	<!-- 선택한 구군에 포함된 동 정보 호출 -->
	<select id="getDongInGugun" parameterType="string" resultType="houseDealDongDto">
		select distinct dongName, dongCode
		from dongcode
		where left(dongCode, 5) = #{gugun}
		order by dongName;
	</select>
	
	<!-- 선택한 동에 포함된 아파트 정보 호출 (+ 검색) -->
	<select id="getAptInDong" parameterType="houseParameterDto" resultType="houseDealInfoDto">
		with tee as (select house_deal.addressId, address.apartName, address.dongCode, address.buildYear, house_deal.dealAmount, house_deal.dealYear, house_deal.dealMonth, house_deal.dealDay, house_deal.area, house_deal.floor, address.lat, address.lng from address left join house_deal on house_deal.addressId = address.addressId)
		select * from tee where addressId in (select addressId from address where dongCode = #{dongCode})
			<if test="word != null and word != ''">
				<if test="key == 'amount'">
					and <![CDATA[convert(tee.dealAmount, signed) <= #{word}]]>
				</if>
				<if test="key == 'area'">
					and <![CDATA[convert(tee.area, signed) >= #{word}]]>
				</if>
				<if test="key == 'floor'">
					and <![CDATA[convert(tee.floor, signed) >= #{word}]]>
				</if>
				<if test="key == 'buildYear'">
					and <![CDATA[tee.buildYear >= #{word}]]>
				</if>
				<if test="key == 'apartName'">
					and tee.apartName like concat('%', #{word}, '%')
				</if>
				<if test="key == 'dealDate'">
					and tee.dealYear = #{dealYear} and tee.dealMonth = #{dealMonth}
				</if>
			</if>
	</select>
	
	
	<!-- #매물 게시판 -->	
	<!-- 매물 등록(+ 이미지 업로드) -->
	<insert id="registerHouseProduct" parameterType="houseProductDto">
		insert into house_product (userId, addressId, floor, buildYear, dealAmount, area, dealType, stateFlag, content)
		values (#{userId}, #{addressId}, #{floor}, #{buildYear}, #{dealAmount}, #{area}, #{dealType}, 0, #{content}); 
		<selectKey resultType="int" keyProperty="houseProductId" order="AFTER">
			select last_insert_id()
		</selectKey>
	</insert>
	<!-- 이미지 -->
	<insert id="registerHouseProductImage" parameterType="houseProductDto">
		insert into house_image (houseProductId, saveFolder, originalFileName, saveFileName)
		values
		<foreach collection="houseImages" item="houseImage" separator=" , ">
			(#{houseProductId},  #{houseImage.saveFolder}, #{houseImage.originalFileName}, #{houseImage.saveFileName})
		</foreach>
	</insert>
	
	<!-- 매물 목록(+ 검색) -->
	<select id="listHouseProduct" parameterType="houseProductParameterDto" resultType="houseProductDto">
		with temp as (select house_product.houseProductId, house_product.userId, house_product.addressId, house_product.floor, house_product.buildYear, house_product.dealAmount, house_product.area, house_product.dealType, house_product.stateFlag, house_product.content, address.roadName, address.roadNameBonbun, address.roadNameBubun, address.apartName, address.dongCode, address.lat, address.lng from address left join house_product on house_product.addressId = address.addressId)
		select * from temp where addressId in (select addressId from address where dongCode = #{dongCode})
			<if test="word != null and word != ''">
			<if test="key == 'amount'">
				and <![CDATA[convert(dealAmount, signed) <= #{word}]]>
			</if>
			<if test="key == 'area'">
				and <![CDATA[convert(area, signed) >= #{word}]]>
			</if>
			<if test="key == 'floor'">
				and <![CDATA[convert(floor, signed) >= #{word}]]>
			</if>
			<if test="key == 'buildYear'">
				and <![CDATA[buildYear >= #{word}]]>
			</if>
			<if test="key == 'userId'">
				and userId = #{word}
			</if>
			<if test="key == 'dealType'">
				and dealType = #{word}
			</if>
		</if>
		order by houseProductId desc
	</select>
	
	<!-- 매물 상세보기(+ 이미지) -->
	<select id="getHouseProduct" parameterType="int" resultMap="viewProduct">
		<!-- select houseProductId, userId, addressId, floor, buildYear, dealAmount, area, dealType, stateFlag, content
		from house_product
		where houseProductId = #{houseProductId} -->
		select house_product.houseProductId, house_product.userId, house_product.addressId, house_product.floor, house_product.buildYear, house_product.dealAmount, house_product.area, house_product.dealType, house_product.stateFlag, house_product.content, address.dongCode, address.roadName, address.roadNameBonbun, address.roadNameBubun, address.apartName, address.lat, address.lng
		from address
		left join house_product on house_product.addressId = address.addressId
		where houseProductId = #{houseProductId};
	</select>
	<select id="houseImageList" resultType="houseImageDto">
		select houseImageId, houseProductId, saveFolder, originalFileName, saveFileName
		from house_image
		where houseProductId = #{houseProductId};
	</select>
	
	<!-- 매물 수정 -->
	<update id="updateHouseProduct" parameterType="houseProductDto">
		update house_product
		set addressId = #{addressId}, floor = #{floor}, buildYear = #{buildYear}, dealAmount = #{dealAmount}, area = #{area}, dealType = #{dealType}, content = #{content}
		where houseProductId = #{houseProductId}
	</update>
	
	<!-- 매물 판매완료로 변경 -->
	<update id="soldOutHouseProduct" parameterType="int">
		update house_product
		set stateFlag = 1
		where houseProductId = #{houseProductid}
	</update>
	
	<!-- 매물 삭제 -->
	<delete id="deleteHouseProduct" parameterType="int">
		delete from house_product
		where houseProductId = #{houseProductid}
	</delete>
	<!-- ! 매물 삭제 시 해당 매물과 연관된 리뷰, 북마크 모두 삭제 -->
	<delete id="deleteRelationHouseProduct" parameterType="int">
		delete bookmark, review
		from house_product_bookmark bookmark 
			left join house_product_review review
			on bookmark.houseProductId = review.houseProductId
		where review.houseProductId = #{houseProductid};
	</delete>
	<!-- ! 매물 삭제 시 해당 매물과 연관된 이미지 삭제 -->
	<delete id="deleteRelationHouseProductImage" parameterType="int">
		delete from house_image
		where houseProductId = #{houseProductid}
	</delete>
	
	<!-- 특정 매물의 이미지 삭제 -->
	<delete id="deleteHouseProductImage" parameterType="int">
		delete from house_image 
		where houseImageId = #{houseImageId}
	</delete>
	
	<!-- 매물 주변 부가정보 -->
	
	<!-- 매물 신고 (매물을 올린 기업회원 신고) -->
	<update id="reportHouseProduct" parameterType="String">
		update user
		set reportCount = reportCount + 1
		where userId = #{userid}
	</update>
	
	<!-- 매물 북마크 등록 -->
	<insert id="bookmarkProduct" parameterType="houseProductBookmarkDto">
		insert house_product_bookmark(userId, houseProductId)
		values(#{userId}, #{houseProductId});	
	</insert>
	
	<!-- 매물 북마크 해제(삭제) -->
	<delete id="deleteBookmarkProduct" parameterType="int">
		delete from house_product_bookmark
		where houseProductBookmarkId = #{houseProductBookmarkid}
	</delete>
		
	<!-- 매물 리뷰 등록 -->
	<insert id="reviewProduct" parameterType="houseProductReviewDto">
		<!-- insert into house_product_review(houseProductId, userId, writerUserId, rating, content, regtime, image)
		values (#{houseProductId}, #{userId}, #{writerUserId}, #{rating}, #{content}, now(), #{image}); -->
		insert into house_product_review(houseProductId, userId, writerUserId, rating, content, regtime, image)
		values (#{houseProductId}, (select userId from house_product where houseProductId = #{houseProductId}), #{writerUserId}, #{rating}, #{content}, now(), #{image});
	</insert>
	
	<!-- 매물 리뷰 목록 -->
	<select id="reviewProductList" parameterType="int" resultType="houseProductReviewDto">
		select houseProductReviewId, houseProductId, userId, writerUserId, rating, content, image, regtime
		from house_product_review
		where houseProductId = #{houseProductid}; 
	</select>
	
	<!-- 매물 리뷰 수정 -->
	<update id="editReviewProduct" parameterType="houseProductReviewDto">
		update house_product_review
		set rating = #{rating}, content = #{content}, image = #{image}
		where houseProductReviewId = #{houseProductReviewId}
	</update>
	
	<!-- 매물 리뷰 삭제 -->
	<delete id="deleteReviewProduct" parameterType="int">
		delete from house_product_review
		where houseProductReviewId = #{houseProductReviewid}
	</delete>
	
	
</mapper>